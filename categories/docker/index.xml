<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Henry Post</title><link>/categories/docker/</link><description>Recent content in docker on Henry Post</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2021 &lt;a href="http://henrypost.net/">Henry Post&lt;/a></copyright><lastBuildDate>Sat, 05 Jun 2021 13:52:36 -0500</lastBuildDate><atom:link href="/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Devops Project CI/CD With Jenkins, Ansible, Docker, K8s</title><link>/posts/2021-06-05-devops-project-cicd-with-jenkins-ansible-docker-k8s/</link><pubDate>Sat, 05 Jun 2021 13:52:36 -0500</pubDate><guid>/posts/2021-06-05-devops-project-cicd-with-jenkins-ansible-docker-k8s/</guid><description>The course The course is below.
https://udemy.com/course/valaxy-devops/
My work My work on this course can be found at the following links:
https://github.com/HenryFBP/valaxydevopsproject https://github.com/HenryFBP/valaxydevopsproject-hello-world-app Forked from respectively:
https://github.com/yankils/Simple-DevOps-Project https://github.com/yankils/hello-world Section 1: Introduction 1. Introduction We&amp;rsquo;ll use Git for SCM, Jenkins for CICD pipelines, Maven as build tool, Ansible for configuraton mgmt post-deployment, Docker to host aps, k8s to manage our docker containers.
We&amp;rsquo;ll use AWS to set all of this up.
DevOps Flow Devs usually push code to Git.</description></item><item><title>Docker Crash Course Notes</title><link>/posts/2021-05-12-docker-crash-course/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>/posts/2021-05-12-docker-crash-course/</guid><description>The course The course is below.
https://www.udemy.com/course/docker-tutorial-for-devops-run-docker-containers/
My work for this course can be found here:
https://github.com/HenryFBP/docker-crash-course https://github.com/henryfbp/dockerapp/ Slides are here.
Section 1: Get Started with Docker 1. Course Overview See course.
2. Support See course.
3. Support See course.
4. Slides See course.
5. Intro to virtualization Docker is only one implementation of containerization.
Before virtualization, the OS is installed on a physical machine, and apps run on the OS. Each machine only ran 1 app.</description></item><item><title>Docker for Node.js Projects From a Docker Captain</title><link>/posts/2020-12-28-docker-for-node.js-projects-from-a-docker-captain/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>/posts/2020-12-28-docker-for-node.js-projects-from-a-docker-captain/</guid><description>Preamble From https://www.udemy.com/course/docker-mastery-for-nodejs/.
Code/work in http://github.com/HenryFBP/Docker-for-Node.js-Projects-From-a-Docker-Captain.git.
Section 2: Docker Compose Basics sudo apt install docker docker-compose nodejs npm Links https://docs.docker.com/compose/ https://github.com/docker/toolbox/releases https://docs.docker.com/compose/compose-file/ https://github.com/BretFisher/ama/issues/8 https://docs.docker.com/compose/compose-file/compose-versioning/ https://github.com/docker/docker.github.io/pull/7593 Why compose? CLI is designed around dev workflows Not really designed for production docker-compose CLI talks to docker daemon and can be a substitute for the docker CLI itself docker-compose takes long-ass commands with 20+ flags and puts them into YAML files &amp;ldquo;Let&amp;rsquo;s not create more scripts, but make a tool that automates workflow in a declarative way&amp;rdquo; Use the docker-compose for dev&amp;rsquo;t but not for deployment, that should be done with docker command.</description></item></channel></rss>