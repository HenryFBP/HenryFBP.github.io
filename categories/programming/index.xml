<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Henry Post</title><link>/categories/programming/</link><description>Recent content in programming on Henry Post</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2021 &lt;a href="https://www.wangchucheng.com/">C. Wang&lt;/a> and &lt;a href="https://www.ruiqima.com/">R. Ma&lt;/a></copyright><lastBuildDate>Tue, 19 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL Injection Video</title><link>/posts/2020-12-28-sql-injection-video/</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate><guid>/posts/2020-12-28-sql-injection-video/</guid><description>A video I made about SQL Injection. Took about 5 hours total. I don&amp;rsquo;t do video editing or stuff like this frequently, but thought I&amp;rsquo;d post it here. Enjoy!
Resources:
https://www.youtube.com/watch?v=o7GODnWYYjE https://github.com/HenryFBP/sqlinjection-training-app/blob/master/video-script.md https://github.com/HenryFBP/sqlinjection-training-app I used:
OpenShot (It is genuinely painful to use for keyframes or splicing/positioning, please use DaVinci Resolve or kdenlive instead) Audacity GIMP Visual Studio Code I want to say thanks to the original repository creators, AppSecCo, for putting this source code on GitHub.</description></item><item><title>Docker for Node.js Projects From a Docker Captain</title><link>/posts/2020-12-28-docker-for-node.js-projects-from-a-docker-captain/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>/posts/2020-12-28-docker-for-node.js-projects-from-a-docker-captain/</guid><description>TOC From https://www.udemy.com/course/docker-mastery-for-nodejs/.
Code/work in http://github.com/HenryFBP/Docker-for-Node.js-Projects-From-a-Docker-Captain.git.
This will become a table of contents. Don&amp;rsquo;t touch!
{:toc}
Section 2: Docker Compose Basics sudo apt install docker docker-compose nodejs npm Links https://docs.docker.com/compose/ https://github.com/docker/toolbox/releases https://docs.docker.com/compose/compose-file/ https://github.com/BretFisher/ama/issues/8 https://docs.docker.com/compose/compose-file/compose-versioning/ https://github.com/docker/docker.github.io/pull/7593 Why compose? CLI is designed around dev workflows Not really designed for production docker-compose CLI talks to docker daemon and can be a substitute for the docker CLI itself docker-compose takes long-ass commands with 20+ flags and puts them into YAML files &amp;ldquo;Let&amp;rsquo;s not create more scripts, but make a tool that automates workflow in a declarative way&amp;rdquo; Use the docker-compose for dev&amp;rsquo;t but not for deployment, that should be done with docker command.</description></item><item><title>Certified Secure Software Lifecycle Professional (CSSLP) Notes</title><link>/posts/2020-06-15-csslp-notes/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>/posts/2020-06-15-csslp-notes/</guid><description>TOC https://www.isc2.org/Certifications/CSSLP
This is a collection of notes I&amp;rsquo;ve taken for the CSSLP. Hopefully they are useful to you as well!
I made a program to study for this test. Feel free to use it.
https://github.com/HenryFBP/pyconsolequiz
This will become a table of contents. Don&amp;rsquo;t touch!
{:toc}
Secure Software Concepts Core Concepts Main concept is about restricting user access Confidentiality Keep info away from people who don&amp;rsquo;t NEED to know it</description></item><item><title>On making security easy to implement</title><link>/posts/2020-05-25-on-making-security-easy-to-implement/</link><pubDate>Mon, 25 May 2020 13:30:00 -0500</pubDate><guid>/posts/2020-05-25-on-making-security-easy-to-implement/</guid><description>THIS IS A DRAFT As a programmer and a &amp;ldquo;security practitioner&amp;rdquo;, I often find myself learning a lot about security tools and secure coding practices. As a result of that, I have gained a larger amount of secure coding practices and knowledge about specific security vulnerabilities, and exactly what one should not do when coding a system that needs to be secure.
main points: it /should/ be HARD and OBVIOUS to create security defects in apps it should be easy to create secure apps moreso, devs should not NEED to think about security as much as they do part of that should be taken care of by the framework that they use specifically web frameworks as those handle user input the MOST out of all technologies problem: it is EASY and DIFFICULT TO SPOT if a security defect exists in an app WHY is it a PROBLEM?</description></item><item><title>Analyzing document-based malware and reverse engineering it</title><link>/posts/2020-04-27-analyzing-document-based-malware-and-reverse-engineering-it/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>/posts/2020-04-27-analyzing-document-based-malware-and-reverse-engineering-it/</guid><description>TOC This will become a table of contents. Don&amp;rsquo;t touch! {:toc} The course The course this post is based off of is Expert Malware Analysis and Reverse Engineering by Abhinav Singh.
https://www.udemy.com/course/expert-malware-analysis-and-reverse-engineering/
My code All of my code I used to create these screenshots and data is below.
https://github.com/HenryFBP/VagrantPackerFiles/tree/master/vagrant/windows-analysis-and-vulnerable
The last commit that this content was modified on can be accessed below.
https://github.com/HenryFBP/VagrantPackerFiles/tree/d2175b7252f8d3e16e0a41e193a9c7da35942245/
Tools Windows VM
https://github.com/HenryFBP/VagrantPackerFiles/tree/master/vagrant/windows-analysis-and-vulnerable Documents</description></item><item><title>Exploiting Vulnserver!</title><link>/posts/2020-04-07-exploiting-vulnserver/</link><pubDate>Tue, 07 Apr 2020 13:30:00 -0500</pubDate><guid>/posts/2020-04-07-exploiting-vulnserver/</guid><description>TOC This will become a table of contents. Don&amp;rsquo;t touch! {:toc} My work/code View my work/code for this blog post at:
https://github.com/HenryFBP/VagrantPackerFiles/tree/e6b73090ed23bda867f36a7f23951da6a54b55b6
The course As part of on-the-job training, I got the chance to take a really nice course on UDemy called &amp;lsquo;Ethical Hacking &amp;amp; Bug Hunting: Buffer Overflow For Beginners&amp;rsquo; by Eslam Medhat.
https://www.udemy.com/course/buffer-overflow-course-exploit-development/
It uses Kali and Windows VMs that communicate with eachother in order to perform DLL injection that leads to a reverse shell being opened.</description></item></channel></rss>